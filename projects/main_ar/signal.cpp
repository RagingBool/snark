#include <Arduino.h>

#include "signal.h"

const uint8_t PROGMEM sinWave[] = {
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2,
  0x2, 0x3, 0x3, 0x3, 0x4, 0x4, 0x5, 0x5, 0x5, 0x6, 0x6, 0x7, 0x7, 0x8, 0x9, 0x9,
  0xa, 0xa, 0xb, 0xc, 0xc, 0xd, 0xe, 0xe, 0xf, 0x10, 0x11, 0x11, 0x12, 0x13, 0x14, 0x15,
  0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24,
  0x25, 0x26, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2f, 0x30, 0x31, 0x32, 0x34, 0x35, 0x36, 0x37,
  0x39, 0x3a, 0x3b, 0x3d, 0x3e, 0x3f, 0x41, 0x42, 0x43, 0x45, 0x46, 0x48, 0x49, 0x4a, 0x4c, 0x4d,
  0x4f, 0x50, 0x52, 0x53, 0x55, 0x56, 0x58, 0x59, 0x5a, 0x5c, 0x5d, 0x5f, 0x61, 0x62, 0x64, 0x65,
  0x67, 0x68, 0x6a, 0x6b, 0x6d, 0x6e, 0x70, 0x71, 0x73, 0x75, 0x76, 0x78, 0x79, 0x7b, 0x7c, 0x7e,
  0x7f, 0x81, 0x83, 0x84, 0x86, 0x87, 0x89, 0x8a, 0x8c, 0x8e, 0x8f, 0x91, 0x92, 0x94, 0x95, 0x97,
  0x98, 0x9a, 0x9b, 0x9d, 0x9e, 0xa0, 0xa2, 0xa3, 0xa5, 0xa6, 0xa7, 0xa9, 0xaa, 0xac, 0xad, 0xaf,
  0xb0, 0xb2, 0xb3, 0xb5, 0xb6, 0xb7, 0xb9, 0xba, 0xbc, 0xbd, 0xbe, 0xc0, 0xc1, 0xc2, 0xc4, 0xc5,
  0xc6, 0xc8, 0xc9, 0xca, 0xcb, 0xcd, 0xce, 0xcf, 0xd0, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd9,
  0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
  0xea, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xee, 0xef, 0xf0, 0xf1, 0xf1, 0xf2, 0xf3, 0xf3, 0xf4, 0xf5,
  0xf5, 0xf6, 0xf6, 0xf7, 0xf8, 0xf8, 0xf9, 0xf9, 0xfa, 0xfa, 0xfa, 0xfb, 0xfb, 0xfc, 0xfc, 0xfc,
  0xfd, 0xfd, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void Lfo::update(uint16_t deltaMillis) {
  _phaseGenerator.update(deltaMillis);
  uint16_t phase = _phaseGenerator.getPhase();
  uint8_t triangle = (phase < 0x100) ? phase : 0x1FF - phase;
  
  uint8_t newValue;
  switch(_lfoFunction) {
    case SAW_UP:
      newValue = phase >> 1;
      break;
    case SAW_DOWN:
      newValue = 0xFF - (phase >> 1);
      break;
    case SQUARE:
      newValue = (phase < 0x100) ? 0 : 0xFF;
      break;
    case TRIANGLE:
      newValue = triangle;
      break;
    case SIN_WAVE:
      newValue = pgm_read_byte(&sinWave[triangle]);
      break;
    default:
      newValue = 0;
      break;
  }
        
  _outputSig.setValue(newValue);
}

void HsiToRgb::update(uint16_t deltaMillis) {
  uint16_t hue = _pHueInputSig != 0 ? _pHueInputSig -> getValue() : 0;
  uint16_t saturation = _pSaturationInputSig != 0 ? _pSaturationInputSig -> getValue() : 0;
  uint16_t intensity = _pIntensityInputSig != 0 ? _pIntensityInputSig -> getValue() : 0;
  
  hue &= 0xFF;
  saturation = saturation < 0xFF ? saturation : 0xFF;
  intensity = intensity < 0xFF ? intensity : 0xFF;
  
  uint16_t red;
  uint16_t green;
  uint16_t blue;
  
  HsiToRgb::hsiToRgb(hue, saturation, intensity, red, green, blue);
  
  _redOutputSig.setValue(red);
  _greenOutputSig.setValue(green);
  _blueOutputSig.setValue(blue);
}

void HsiToRgb::hsiToRgb(uint16_t hue, uint16_t saturation, uint16_t intensity, uint16_t& redOut, uint16_t& greenOut, uint16_t& blueOut) {
  // Based on a post by Brian Neltner: http://blog.saikoled.com/post/43693602826/why-every-led-light-should-be-using-hsi
  
  float hueRadians = 3.14159 * hue / 128.f;
  float normSaturation = saturation / 255.f;
  float normIntensity = intensity / 255.f;
  
  float c = 255 * normIntensity / 3;
  
  // Math! Thanks in part to Kyle Miller.
  if(hueRadians < 2.09439) {
    float r = cos(hueRadians) / cos(1.047196667 - hueRadians);
    redOut =   c * (1+normSaturation * r);
    greenOut = c * (1+normSaturation * (1 - r));
    blueOut =  c * (1-normSaturation);
  } else if(hueRadians < 4.188787) {
    float shiftedHue = hueRadians - 2.09439;
    float r = cos(shiftedHue) / cos(1.047196667 - shiftedHue);
    greenOut = c * (1 + normSaturation * r);
    blueOut =  c * (1 + normSaturation * (1 - r));
    redOut =   c * (1 - normSaturation);
  } else {
    float shiftedHue = hueRadians - 4.188787;
    float r = cos(shiftedHue) / cos(1.047196667 - shiftedHue);
    blueOut =  c * (1 + normSaturation * r);
    redOut =   c * (1 + normSaturation * (1 - r));
    greenOut = c * (1 - normSaturation);
  }
}

